<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>我是山姆鍋</title>
  
  <subtitle>軟體開發方法、技術與工具的應用紀錄。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://samkuo.me/"/>
  <updated>2020-05-31T01:53:33.284Z</updated>
  <id>https://samkuo.me/</id>
  
  <author>
    <name>Sampot (山姆鍋)</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>我的 K8S DevOps 實驗環境 - 基礎篇</title>
    <link href="https://samkuo.me/post/2020/05/my-k8s-devops-lab-env/"/>
    <id>https://samkuo.me/post/2020/05/my-k8s-devops-lab-env/</id>
    <published>2020-05-30T11:58:09.840Z</published>
    <updated>2020-05-31T01:53:33.284Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;雖然 Minikube、K3D 或者 Docker for Desktop 都提供 Kubernetes 測試環境可以方便開發雲原生應用軟體。但從運維角度來說，這些工具並不適合用來測試與驗證需要多節點的方案，例如：高可用的 etcd；K8S 的儲存方案如 &lt;a href=&quot;https://openebs.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;OpenEBS&lt;/a&gt;, &lt;a href=&quot;https://rook.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ROOK&lt;/a&gt; 等需要額外的儲存媒體 (e.g. 硬碟) 來實現；又或者有在主機系統額外安裝套件的需求。本文山姆鍋利用 Vagrant 跟 VirtualBox 虛擬技術作為快速拆建的實驗環境。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Vagrant" scheme="https://samkuo.me/tag/vagrant/"/>
    
      <category term="DevOps" scheme="https://samkuo.me/tag/devops/"/>
    
      <category term="Kubernetes" scheme="https://samkuo.me/tag/kubernetes/"/>
    
      <category term="VirtualBox" scheme="https://samkuo.me/tag/virtualbox/"/>
    
      <category term="HAProxy" scheme="https://samkuo.me/tag/haproxy/"/>
    
      <category term="Keepalived" scheme="https://samkuo.me/tag/keepalived/"/>
    
      <category term="SPK Cluster" scheme="https://samkuo.me/tag/spk-cluster/"/>
    
  </entry>
  
  <entry>
    <title>Vagrant+VirtualBox 跨平台虛擬環境</title>
    <link href="https://samkuo.me/post/2020/05/vagrant-virtualbox-devops-tool/"/>
    <id>https://samkuo.me/post/2020/05/vagrant-virtualbox-devops-tool/</id>
    <published>2020-05-20T06:52:00.890Z</published>
    <updated>2020-05-20T12:14:15.333Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;山姆鍋過去雖然提過 Vagrant 以及 VirtualBox 作為開發運維的虛擬化測試環境，但卻都沒有提到過如何安裝。一方面認為這類工具安裝相當基本，一方面也認為網路上很容易就可以找到相關教學文件。由於太常用到 Vagrant，也為了能夠同時支援 Windows、OS X 以及 Ubuntu 系統的技術人員可以快速準備好環境，山姆鍋還是整理了這三個平台的安裝步驟。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Ubuntu" scheme="https://samkuo.me/tag/ubuntu/"/>
    
      <category term="Windows" scheme="https://samkuo.me/tag/windows/"/>
    
      <category term="Vagrant" scheme="https://samkuo.me/tag/vagrant/"/>
    
      <category term="DevOps" scheme="https://samkuo.me/tag/devops/"/>
    
      <category term="VirtualBox" scheme="https://samkuo.me/tag/virtualbox/"/>
    
      <category term="OS X" scheme="https://samkuo.me/tag/os-x/"/>
    
      <category term="Multipass" scheme="https://samkuo.me/tag/multipass/"/>
    
  </entry>
  
  <entry>
    <title>設定 Windows Terminal 作為 WSL 操作介面</title>
    <link href="https://samkuo.me/post/2020/05/windows-terminal-default-wsl-ubuntu-shell/"/>
    <id>https://samkuo.me/post/2020/05/windows-terminal-default-wsl-ubuntu-shell/</id>
    <published>2020-05-11T23:49:01.000Z</published>
    <updated>2020-05-11T23:49:47.878Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;在設定 Surface Pro 作為備用開發環境的過程中，選用 Windows Termainl 作為終端機模擬器。雖然不像 Cmder 那般強大，但作為終端機模擬器，其畫面操作效果還是令人滿意的。由於主要是以 Linux 環境為主，本文山姆鍋說明如何設定 Windows Terminal，讓它一啟動就執行 Ubuntu 文字操作介面。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="WSL" scheme="https://samkuo.me/tag/wsl/"/>
    
      <category term="Ubuntu" scheme="https://samkuo.me/tag/ubuntu/"/>
    
      <category term="Windwos Terminal" scheme="https://samkuo.me/tag/windwos-terminal/"/>
    
      <category term="shell" scheme="https://samkuo.me/tag/shell/"/>
    
  </entry>
  
  <entry>
    <title>一個通用 Web 應用架構</title>
    <link href="https://samkuo.me/post/2020/05/generic-web-software-architecture/"/>
    <id>https://samkuo.me/post/2020/05/generic-web-software-architecture/</id>
    <published>2020-05-07T02:57:52.000Z</published>
    <updated>2020-05-31T09:19:47.838Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;在經歷大大小小不同專案後，除了有特殊要求的系統外 (如需符合 PCI-DSS 的第三方支付服務、即時影音串流等), 大部分的 Web 應用架構其實都是大同小異。本文提供一個通用的 Web 應用架構作為參考，希望可以符合 80% 以上 Web 專案的需求。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Kubernetes" scheme="https://samkuo.me/tag/kubernetes/"/>
    
      <category term="Software architecture" scheme="https://samkuo.me/tag/software-architecture/"/>
    
      <category term="Web Application platform" scheme="https://samkuo.me/tag/web-application-platform/"/>
    
  </entry>
  
  <entry>
    <title>讓程式從 WSL 環境自動開啟 Windows 系統的瀏覽器</title>
    <link href="https://samkuo.me/post/2020/05/launch-windows-default-browser-from-inside-wsl/"/>
    <id>https://samkuo.me/post/2020/05/launch-windows-default-browser-from-inside-wsl/</id>
    <published>2020-05-04T02:11:41.000Z</published>
    <updated>2020-05-04T02:11:41.945Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;在使用 Hexo 撰寫部落格文章或者開發 Web 應用時常常會需要開啟瀏覽器來檢視結果。Hexo 或者 Web 應用開發工具除了支援啟動後端服務外也支援自動啟動系統預設的瀏覽器，但由於在 WSL 環境預設並沒有圖形桌面環境，自然無法開啟瀏覽器。本文山姆鍋將說明如何讓 WSL 中的程式可以自動開啟 Windows 系統預設的瀏覽器。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="xdg-open" scheme="https://samkuo.me/tag/xdg-open/"/>
    
      <category term="WSL" scheme="https://samkuo.me/tag/wsl/"/>
    
  </entry>
  
  <entry>
    <title>WSL 開發環境改為在 Ubuntu 中執行 Docker</title>
    <link href="https://samkuo.me/post/2020/05/wsl-switch-to-docker-ce-in-linux/"/>
    <id>https://samkuo.me/post/2020/05/wsl-switch-to-docker-ce-in-linux/</id>
    <published>2020-05-03T02:15:58.000Z</published>
    <updated>2020-05-04T08:27:29.543Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;雖然 Docker Desktop for WSL 利用 WSL 來執行 Linux 容器，一方面提高容器在 Windows 環境的執行效率，一方面也提高記憶體等資源與主機系統的共用程度。雖然相對之前採用完整虛擬機相對節省資源，但對山姆鍋的低配 Surface Pro 來說還是太佔資源。也由於 WSL 2 已經可以直接執行 Docker engine 來支援 Linux 容器的執行，所以決定改採用這個方式來提供 Docker 服務。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="WSL" scheme="https://samkuo.me/tag/wsl/"/>
    
      <category term="Ubuntu" scheme="https://samkuo.me/tag/ubuntu/"/>
    
      <category term="Docker" scheme="https://samkuo.me/tag/docker/"/>
    
  </entry>
  
  <entry>
    <title>使用 hexo-browsersync 自動刷新瀏覽器頁面</title>
    <link href="https://samkuo.me/post/2020/05/hexo-browsersync-fix/"/>
    <id>https://samkuo.me/post/2020/05/hexo-browsersync-fix/</id>
    <published>2020-05-01T03:07:46.000Z</published>
    <updated>2020-05-02T02:45:32.549Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;使用 Hexo 寫部落格文章時，雖然 VS Code 有 Markdown 的預覽延伸套件，但因為預覽並不支援主題所使用的 &lt;code&gt;image&lt;/code&gt; 標籤，在發布前還是需要在瀏覽器看實際呈現的結果。雖然知道 Hexo 有 hexo-browsersync 以及 hexo-livereload 插建可以利用，但按照說明一直無法設定成功。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="hexo" scheme="https://samkuo.me/tag/hexo/"/>
    
      <category term="blog" scheme="https://samkuo.me/tag/blog/"/>
    
  </entry>
  
  <entry>
    <title>Docker Desktop for WSL2 容器化開發環境</title>
    <link href="https://samkuo.me/post/2020/04/dev-env-docker-wsl2-k3d-vs-code/"/>
    <id>https://samkuo.me/post/2020/04/dev-env-docker-wsl2-k3d-vs-code/</id>
    <published>2020-04-22T03:32:25.000Z</published>
    <updated>2020-04-30T02:56:36.143Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Surface Pro 跑得動 Docker + Kubernetes? 採用輕量化虛擬技術加上特別的 K8S 發行套件，答案應該是可行的。本文山姆鍋告訴您可以採用哪些組件來達成。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Docker" scheme="https://samkuo.me/tag/docker/"/>
    
      <category term="WSL2" scheme="https://samkuo.me/tag/wsl2/"/>
    
      <category term="K3S" scheme="https://samkuo.me/tag/k3s/"/>
    
      <category term="K3D" scheme="https://samkuo.me/tag/k3d/"/>
    
      <category term="Kubernetes" scheme="https://samkuo.me/tag/kubernetes/"/>
    
      <category term="Container" scheme="https://samkuo.me/tag/container/"/>
    
      <category term="容器" scheme="https://samkuo.me/tag/%E5%AE%B9%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>運用 Multipass 與 K3S 建立 Kubernetes 測試環境</title>
    <link href="https://samkuo.me/post/2020/04/multipass-k3s-kubernetes-dev-env/"/>
    <id>https://samkuo.me/post/2020/04/multipass-k3s-kubernetes-dev-env/</id>
    <published>2020-04-06T01:21:18.000Z</published>
    <updated>2020-04-06T04:30:48.336Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;雖然已經有 Docker Desktop、Minikube 等可以提供 K8S 本機的測試環境，但最近才發現 Canonical 公司 (Ubuntu 的發行商) 提供 Multipass 這個輕量級的跨平台虛擬機管理方案，標榜跟 Docker Desktop 一樣容易使用。由於 Ubuntu 也是山姆鍋偏好的部署環境作業系統，如果能夠從開發、測試到生產環境都使用相同的作業系統，也許是個好主意。因此，嘗試使用 Multipass 來建置 K8S 本地開發、測試環境。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="K3S" scheme="https://samkuo.me/tag/k3s/"/>
    
      <category term="Container" scheme="https://samkuo.me/tag/container/"/>
    
      <category term="multipass" scheme="https://samkuo.me/tag/multipass/"/>
    
      <category term="K8S" scheme="https://samkuo.me/tag/k8s/"/>
    
  </entry>
  
  <entry>
    <title>Web 新創也該使用 Kubernetes</title>
    <link href="https://samkuo.me/post/2020/04/kubernetes-is-for-startup/"/>
    <id>https://samkuo.me/post/2020/04/kubernetes-is-for-startup/</id>
    <published>2020-04-03T00:12:13.000Z</published>
    <updated>2020-05-04T00:15:12.680Z</updated>
    
    <summary type="html">
    
      
      
        &lt;p&gt;導入 Kubernetes 的門檻不低，在過去我並不建議新創團隊一開始就採用。隨著雲端託管的 K8S 服務越來越普及，本地開發、測試工具與環境容易取得，加上自建與維運一個 K8S 叢集的解決方案越加成熟，再再都顯示使用 K8S 作為應用部署平台的好處已超過導入的成本。時至今
      
    
    </summary>
    
    
    
      <category term="Kubernetes" scheme="https://samkuo.me/tag/kubernetes/"/>
    
      <category term="Web Startup" scheme="https://samkuo.me/tag/web-startup/"/>
    
  </entry>
  
  <entry>
    <title>一個故事說明軟體架構的必要性</title>
    <link href="https://samkuo.me/post/2020/03/why-sotfware-architecture-is-necessary-by-story/"/>
    <id>https://samkuo.me/post/2020/03/why-sotfware-architecture-is-necessary-by-story/</id>
    <published>2020-03-23T06:15:06.000Z</published>
    <updated>2020-03-23T09:32:35.458Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;在山姆鍋早期的職業生涯，還在擔任軟體工程師的時候，發生的一件事讓山姆鍋體驗到要讓整個團隊的開發成為一個完整可順利運行的系統，缺乏架構真的困難重重。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="software architecture" scheme="https://samkuo.me/tag/software-architecture/"/>
    
  </entry>
  
  <entry>
    <title>在 Ubuntu 上部署適合上線的單機 NodeBB 論壇服務</title>
    <link href="https://samkuo.me/post/2020/03/install-nodebb-digitalocean-production/"/>
    <id>https://samkuo.me/post/2020/03/install-nodebb-digitalocean-production/</id>
    <published>2020-03-22T06:00:59.000Z</published>
    <updated>2020-03-23T02:37:15.282Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;本文山姆鍋分享如何安裝與設定一個 NodeBB 論壇的正式生產環境 (production environment)。由於整個環境不只包含 NodeBB 本身，會從主機系統的開始設定開始到 Nginx web 服務。安裝過程參考了多篇文章，對於特定元件的安裝細節會直接連結到對應的教學文章，本文盡量只做重點說明。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Ubuntu" scheme="https://samkuo.me/tag/ubuntu/"/>
    
      <category term="nodebb" scheme="https://samkuo.me/tag/nodebb/"/>
    
      <category term="digitalocean" scheme="https://samkuo.me/tag/digitalocean/"/>
    
      <category term="redis" scheme="https://samkuo.me/tag/redis/"/>
    
      <category term="nodejs" scheme="https://samkuo.me/tag/nodejs/"/>
    
      <category term="iframely" scheme="https://samkuo.me/tag/iframely/"/>
    
      <category term="solr" scheme="https://samkuo.me/tag/solr/"/>
    
  </entry>
  
  <entry>
    <title>社群論壇軟體 NodeBB</title>
    <link href="https://samkuo.me/post/2020/03/morden-web-forum-nodebb/"/>
    <id>https://samkuo.me/post/2020/03/morden-web-forum-nodebb/</id>
    <published>2020-03-20T03:04:45.000Z</published>
    <updated>2020-03-20T06:33:10.464Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;最近山姆鍋在建置業餘專案 &lt;a href=&quot;https://developers.tw&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;#呆丸開發者&lt;/a&gt;時，需要一個可以支援多對多溝通模式的 web 應用。幾經思考，覺得論壇軟體可以符合大部分需求。傳統的 web 論壇軟體雖然成熟，功能也完整，但網站需要符合 Mobile-first 的要求以及現代化的使用者體驗，所以需要跳脫傳統論壇軟體框架的選擇。可能合用且比較常見的有下列三個：&lt;a href=&quot;https://www.discourse.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Discourse&lt;/a&gt;、&lt;a href=&quot;https://nodebb.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;NodeBB&lt;/a&gt; 以及 &lt;a href=&quot;https://flarum.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Flarum&lt;/a&gt;。本文並非三者的優缺點比較，僅是山姆鍋介紹 NodeBB 的哪些特點，讓它成為最後選擇。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="nodebb" scheme="https://samkuo.me/tag/nodebb/"/>
    
      <category term="redis" scheme="https://samkuo.me/tag/redis/"/>
    
      <category term="forum" scheme="https://samkuo.me/tag/forum/"/>
    
      <category term="mongosdb" scheme="https://samkuo.me/tag/mongosdb/"/>
    
  </entry>
  
  <entry>
    <title>我為何選擇新創公司工作？</title>
    <link href="https://samkuo.me/post/2020/03/why-i-work-for-startups/"/>
    <id>https://samkuo.me/post/2020/03/why-i-work-for-startups/</id>
    <published>2020-03-05T02:59:33.000Z</published>
    <updated>2020-05-03T21:38:22.958Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;山姆鍋出社會後第一份工作剛好是 2000 年網際網路創業最火熱的時候，但這非山姆鍋選擇加入網際網路新創公司的主因。加入有制度的大公司或者新創事業的原因，追根究底真正的緣由都只是個人的追求不同。本文山姆鍋也來分享當初選擇新創事業的因緣。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="startup" scheme="https://samkuo.me/tag/startup/"/>
    
      <category term="新創事業" scheme="https://samkuo.me/tag/%E6%96%B0%E5%89%B5%E4%BA%8B%E6%A5%AD/"/>
    
  </entry>
  
  <entry>
    <title>改用 Hexo 寫部落格文章</title>
    <link href="https://samkuo.me/post/2018/08/use-hexo-for-blog/"/>
    <id>https://samkuo.me/post/2018/08/use-hexo-for-blog/</id>
    <published>2018-08-30T15:29:50.000Z</published>
    <updated>2020-03-05T02:46:32.018Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;折騰了將近 2 週將「我是山姆鍋」這個部落格改用 &lt;a href=&quot;https://hexo.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt; 來編輯，雖然還是有不少文章格式有問題，大致上該有的都有了。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="hexo" scheme="https://samkuo.me/tag/hexo/"/>
    
      <category term="pelican" scheme="https://samkuo.me/tag/pelican/"/>
    
  </entry>
  
  <entry>
    <title>容器化應用持續交付</title>
    <link href="https://samkuo.me/post/2016/04/containerized-app-continuous-delivery/"/>
    <id>https://samkuo.me/post/2016/04/containerized-app-continuous-delivery/</id>
    <published>2016-04-18T07:45:00.000Z</published>
    <updated>2020-05-03T22:00:22.904Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;自從山姆鍋決定採用容器化技術作為應用部署的方案後，很多的細節需要設計跟決定，為了避免太專注細節， 決定先設計出計畫採用的持續軟體交付流程。由於每個團隊的使用的工具跟系統可能差異很大， 為了讓本文可以適用其他團隊，先以抽象流程來描述然後才說明山姆鍋採用的方案。&lt;/p&gt;
    
    </summary>
    
    <content src="https://samkuo.me//media/shared/continuous-delivery.png" type="image" />
    
    
      <category term="Service Operations" scheme="https://samkuo.me/category/service-operations/"/>
    
    
      <category term="Continuous integration" scheme="https://samkuo.me/tag/continuous-integration/"/>
    
      <category term="Continuous delivery" scheme="https://samkuo.me/tag/continuous-delivery/"/>
    
      <category term="Continuous deployment" scheme="https://samkuo.me/tag/continuous-deployment/"/>
    
      <category term="container" scheme="https://samkuo.me/tag/container/"/>
    
  </entry>
  
  <entry>
    <title>Shippable CI 上 Docker-compose 的難題</title>
    <link href="https://samkuo.me/post/2016/04/shippable-ci-docker-compose/"/>
    <id>https://samkuo.me/post/2016/04/shippable-ci-docker-compose/</id>
    <published>2016-04-16T08:40:00.000Z</published>
    <updated>2018-08-29T12:19:36.961Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;如同多數使用 Docker 容器來部署應用的團隊一樣，山姆鍋也使用 Docker-compose 啟動一組相關的容器來進行整合測試。這樣的測試會在開發者工作機以及持續整合主機上執行。 但是，如果您跟山姆鍋一樣使用 Shippable 這家 CI 服務的話，您可能同樣會遇到一些小麻煩。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Software Development" scheme="https://samkuo.me/category/software-development/"/>
    
    
      <category term="Continuous integration" scheme="https://samkuo.me/tag/continuous-integration/"/>
    
      <category term="Shippable" scheme="https://samkuo.me/tag/shippable/"/>
    
      <category term="Docker Compose" scheme="https://samkuo.me/tag/docker-compose/"/>
    
      <category term="CI" scheme="https://samkuo.me/tag/ci/"/>
    
  </entry>
  
  <entry>
    <title>Docker + Golang = Awesome</title>
    <link href="https://samkuo.me/post/2016/04/docker-golang-awesome/"/>
    <id>https://samkuo.me/post/2016/04/docker-golang-awesome/</id>
    <published>2016-04-16T01:33:00.000Z</published>
    <updated>2018-08-29T11:38:00.751Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;稍微瞭解 Docker 容器技術的人，應該都知道它提供一種可攜帶的 (portable) 的方式讓應用可以在不同環境部署。 應用所需的程式庫、系統套件都完整封裝在容器內避免了傳統部署所遇到的相依性的問題。 但許多的應用包裝成容器後，動則幾百到上千 MB 的大小，在山姆鍋的觀念裡，這可算不上 &quot;可攜帶&quot;！&lt;/p&gt;
    
    </summary>
    
    
      <category term="Service Operations" scheme="https://samkuo.me/category/service-operations/"/>
    
    
      <category term="container" scheme="https://samkuo.me/tag/container/"/>
    
      <category term="Docker" scheme="https://samkuo.me/tag/docker/"/>
    
      <category term="golang" scheme="https://samkuo.me/tag/golang/"/>
    
  </entry>
  
  <entry>
    <title>建立研發團隊比想像中的還要難 100 倍以上</title>
    <link href="https://samkuo.me/post/2016/03/new-development-team/"/>
    <id>https://samkuo.me/post/2016/03/new-development-team/</id>
    <published>2016-03-23T04:39:00.000Z</published>
    <updated>2018-08-29T15:50:46.112Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;山姆鍋的「懶惰病」看來還蠻嚴重的，轉眼離上一篇文章已經是三個多月的事情了！雖然不是最久的紀錄，但這樣還蠻誇張的。這段時間山姆鍋在台北開始了新的工作， 莫名奇妙就在做手機軟體開發，沒多久卻「漂流」到新竹清大育成中心， 負責成立並管理一個研發團隊。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Teamwork" scheme="https://samkuo.me/category/teamwork/"/>
    
    
      <category term="軟體工程師" scheme="https://samkuo.me/tag/%E8%BB%9F%E9%AB%94%E5%B7%A5%E7%A8%8B%E5%B8%AB/"/>
    
      <category term="實習生" scheme="https://samkuo.me/tag/%E5%AF%A6%E7%BF%92%E7%94%9F/"/>
    
  </entry>
  
  <entry>
    <title>在 MacBook 上使用 Python 作實況視訊串流</title>
    <link href="https://samkuo.me/post/2015/12/http-live-streaming-on-osx-camera-with-python/"/>
    <id>https://samkuo.me/post/2015/12/http-live-streaming-on-osx-camera-with-python/</id>
    <published>2015-12-03T02:04:00.000Z</published>
    <updated>2020-03-02T10:17:11.787Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;本文是山姆鍋在學習實況視訊串流 (live video streaming) 過程，用來驗證概念 (proof of concept) 的紀錄。透過 MacBook 內建的鏡頭作為視訊源，並藉由 HTTP Live Streaming (HLS) 協定作實況串流。 雖說是實況，但因為採用 HLS 協定，先天上就會有延遲的。實驗的結果不算太成功，本來只能使用桌面環境的 Safari 瀏覽器來觀看視訊，經過高手指正後，現在手機版的也可以了。&lt;/p&gt;
    
    </summary>
    
    <content src="https://samkuo.me/shared/camera-813747_640.jpg" type="image" />
    
    
      <category term="Software Development" scheme="https://samkuo.me/category/software-development/"/>
    
    
      <category term="Live video" scheme="https://samkuo.me/tag/live-video/"/>
    
      <category term="Streaming" scheme="https://samkuo.me/tag/streaming/"/>
    
      <category term="HLS" scheme="https://samkuo.me/tag/hls/"/>
    
      <category term="HTTP" scheme="https://samkuo.me/tag/http/"/>
    
  </entry>
  
</feed>
